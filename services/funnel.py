import os
import json
import logging
import asyncio
from datetime import datetime
from typing import Optional

from aiogram import types
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from database.orm_query import (
    orm_get_funnel_by_key,
    orm_start_funnel_statistic,
    orm_update_funnel_step,
    orm_complete_funnel,
    orm_get_active_subscription_plans,
    orm_get_user
)
from kbds.inline import get_funnel_next_step_kb, get_subscription_plans_kb
from kbds.reply import phone_request_kb


class FunnelService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Ä–æ–Ω–∫–∞–º–∏"""
    
    @staticmethod
    async def start_funnel(
        message: types.Message,
        session: AsyncSession,
        funnel_key: str,
        state: Optional[FSMContext] = None
    ) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # Avval foydalanuvchining telefon raqamini tekshiramiz
            user = await orm_get_user(session, message.from_user.id)
            if not user or not user.phone:
                # Telefon raqam yo'q - so'raymiz va funnel keyni saqlaymiz
                if state:
                    await state.update_data(pending_funnel_key=funnel_key)
                    from handlers.user_private import UserStates
                    await state.set_state(UserStates.waiting_for_phone)
                
                await message.answer(
                    f"üëã <b>Assalomu alaykum, {message.from_user.first_name}!</b>\n\n"
                    f"Botdan foydalanish uchun avval telefon raqamingizni ulashing:",
                    reply_markup=phone_request_kb
                )
                return True  # Telefon kiritilgandan keyin funnel davom etadi
            
            # Telefon bor - funnel ni boshlash
            return await FunnelService._start_funnel_process(message, session, funnel_key)
            
        except Exception as e:
            logging.error(f"Error starting funnel: {e}")
            await message.answer("‚ùå Xatolik yuz berdi")
            return False
    
    @staticmethod
    async def _start_funnel_process(
        message: types.Message,
        session: AsyncSession,
        funnel_key: str
    ) -> bool:
        """–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—Åini boshlash (telefon raqam mavjud bo'lganda)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            funnel = await orm_get_funnel_by_key(session, funnel_key)
            if not funnel:
                await message.answer("‚ùå Varonka topilmadi")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            from database.models import FunnelStep
            steps_query = select(FunnelStep).where(
                FunnelStep.funnel_id == funnel.id
            ).order_by(FunnelStep.step_number)
            steps_result = await session.execute(steps_query)
            steps = steps_result.scalars().all()
            
            if not steps:
                await message.answer("‚ùå Varonka bo'sh")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await orm_start_funnel_statistic(
                session, 
                message.from_user.id, 
                funnel.id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            await FunnelService._send_funnel_step(
                message, 
                session, 
                funnel,
                steps, 
                0
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (step 0)
            await orm_update_funnel_step(
                session,
                message.from_user.id,
                funnel.id,
                0
            )
            
            logging.info(f"Started funnel '{funnel_key}' for user {message.from_user.id}")
            return True
            
        except Exception as e:
            logging.error(f"Error starting funnel process: {e}")
            await message.answer("‚ùå Xatolik yuz berdi")
            return False
    
    @staticmethod
    async def next_funnel_step(
        callback: types.CallbackQuery,
        session: AsyncSession,
        step_number: int
    ) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database.orm_query import select, FunnelStatistic, Funnel
            from sqlalchemy.orm import joinedload
            
            query = select(FunnelStatistic).where(
                FunnelStatistic.user_id == callback.from_user.id,
                FunnelStatistic.completed == False
            ).options(joinedload(FunnelStatistic.funnel))
            
            result = await session.execute(query)
            stat = result.unique().scalar_one_or_none()
            
            if not stat:
                await callback.answer("‚ùå Aktiv varonka topilmadi")
                return False
            
            funnel = stat.funnel
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏ –≤–æ—Ä–æ–Ω–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            from database.models import FunnelStep
            steps_query = select(FunnelStep).where(
                FunnelStep.funnel_id == funnel.id
            ).order_by(FunnelStep.step_number)
            steps_result = await session.execute(steps_query)
            steps = steps_result.scalars().all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —à–∞–≥
            logging.info(f"Step number: {step_number}, Total steps: {len(steps)}")
            if step_number >= len(steps):
                # –í–æ—Ä–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                logging.info(f"Funnel completed for user {callback.from_user.id}")
                await orm_complete_funnel(session, callback.from_user.id, funnel.id)
                await FunnelService._send_completion_message(callback.message, session)
                await callback.answer("‚úÖ Varonka tugallandi!")
                return True
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            if step_number > 0:
                await orm_update_funnel_step(
                    session,
                    callback.from_user.id,
                    funnel.id,
                    step_number - 1,
                    mark_completed=True
                )
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            await FunnelService._send_funnel_step(
                callback.message,
                session,
                funnel,
                steps,
                step_number
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–≥–∞
            await orm_update_funnel_step(
                session,
                callback.from_user.id,
                funnel.id,
                step_number
            )
            
            await callback.answer()
            return True
            
        except Exception as e:
            logging.error(f"Error in next funnel step: {e}")
            await callback.answer("‚ùå Xatolik yuz berdi")
            return False
    
    @staticmethod
    async def _send_funnel_step(
        message: types.Message,
        session: AsyncSession,
        funnel,
        steps: list,
        step_index: int
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞ –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            if step_index >= len(steps):
                return
            
            step = steps[step_index]
            total_steps = len(steps)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
            show_button = step_index < total_steps - 1
            button_text = step.button_text or "Keyingi ‚û°Ô∏è"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "Tugallash"
            if step_index == total_steps - 1:
                show_button = True
                button_text = "‚úÖ Tugallash"
            
            logging.info(f"Sending step {step_index + 1}/{total_steps}, show_button: {show_button}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = None
            if show_button:
                keyboard = get_funnel_next_step_kb(
                    step_index, 
                    total_steps, 
                    button_text
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if step.content_type == "text":
                await message.answer(
                    step.content_data or step.caption,
                    reply_markup=keyboard
                )
            
            elif step.content_type == "photo":
                await message.answer_photo(
                    step.content_data,
                    caption=step.caption,
                    reply_markup=keyboard
                )
            
            elif step.content_type == "video":
                await message.answer_video(
                    step.content_data,
                    caption=step.caption,
                    reply_markup=keyboard
                )
            
            elif step.content_type == "audio":
                await message.answer_audio(
                    step.content_data,
                    caption=step.caption,
                    reply_markup=keyboard
                )
            
            elif step.content_type == "document":
                await message.answer_document(
                    step.content_data,
                    caption=step.caption,
                    reply_markup=keyboard
                )
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            start_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–≥–∞ - –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û!
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ message –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            # –ü–æ–∫–∞ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logging.info(f"Step {step_index + 1} sent to user, but step statistics not updated here")
            
        except Exception as e:
            logging.error(f"Error sending funnel step: {e}")
            await message.answer("‚ùå Xatolik yuz berdi")
    
    @staticmethod
    async def _send_completion_message(
        message: types.Message,
        session: AsyncSession
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
            plans = await orm_get_active_subscription_plans(session)
            
            if plans:
                keyboard = get_subscription_plans_kb(plans)
                await message.answer(
                    "üéâ <b>Tabriklaymiz!</b> Voronkani muvaffaqiyatli tugalladingiz!\n\n"
                    "üìö Ushbu darslikdan olgan bilimlaringizni sinab ko'ring!\n"
                    "üß™ Test topshirib, bilim darajangizni aniqlang.\n\n"
                    "üíé Premium obunaga o'tib, ko'proq test va amaliy mashqlar bilan tayyorlaning:",
                    reply_markup=keyboard
                )
            else:
                # Test tugmasi bilan
                from kbds.inline import get_back_to_menu_kb
                keyboard = get_back_to_menu_kb()
                await message.answer(
                    "üéâ <b>Tabriklaymiz!</b> Voronkani muvaffaqiyatli tugalladingiz!\n\n"
                    "üìö Ushbu darslikdan olgan bilimlaringizni sinab ko'ring!\n"
                    "üß™ Test topshirib, bilim darajangizni aniqlang.\n\n"
                    "üìù Test boshlash uchun: /test\n"
                    "üìñ Boshqa darsliklar uchun: /start",
                    reply_markup=keyboard
                )
        
        except Exception as e:
            logging.error(f"Error sending completion message: {e}")


# Legacy support - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def send_funnel_messages(message: types.Message, key: str, session: AsyncSession = None):
    """Legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏"""
    if session:
        return await FunnelService.start_funnel(message, session, key)
    else:
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± —Å JSON —Ñ–∞–π–ª–∞–º–∏
        FUNNELS_DIR = "funnels"
        file_path = os.path.join(FUNNELS_DIR, f"{key}.json")
        if not os.path.exists(file_path):
            await message.answer("‚ùå Bunday varonka topilmadi")
            logging.warning(f"Funnel not found: {file_path}")
            return

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            messages = data.get("messages", [])
            if not messages:
                await message.answer("‚ùå Varonkada xabarlar topilmadi")
                logging.warning(f"No messages in funnel: {file_path}")
                return

            async def send_all():
                for text in messages:
                    await message.answer(text)
                    await asyncio.sleep(1.5)

            asyncio.create_task(send_all())
            logging.info(f"Started funnel for user {message.from_user.id} with key {key}")

        except Exception as e:
            await message.answer("‚ùå Xatolik yuz berdi")
            logging.error(f"Error sending funnel: {e}")
