import os
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine

from database.models import Base


#from .env file:
# DATABASE_URL=sqlite+aiosqlite:///my_base.db
# DATABASE_URL=postgresql+asyncpg://login:password@localhost:5432/db_name

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞
    DATABASE_URL = 'sqlite+aiosqlite:///my_base.db'
    print("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
is_postgresql = "postgresql" in DATABASE_URL.lower()
is_sqlite = "sqlite" in DATABASE_URL.lower()

if is_postgresql:
    print("üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
    # PostgreSQL —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_async_engine(
        DATABASE_URL, 
        echo=True,
        pool_size=10,
        max_overflow=20,
        pool_pre_ping=True
    )
elif is_sqlite:
    print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
    # SQLite —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_async_engine(
        DATABASE_URL, 
        echo=True,
        connect_args={"check_same_thread": False}
    )
else:
    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    engine = create_async_engine(DATABASE_URL, echo=True)

# engine = create_async_engine(os.getenv('DB_URL'), echo=True)

session_maker = async_sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)



async def create_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def drop_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
